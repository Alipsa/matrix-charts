import org.gradle.internal.os.OperatingSystem

plugins {
  id 'groovy'
  id 'java-library'
  //id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'signing'
  id 'maven-publish'
  id('io.github.gradle-nexus.publish-plugin') version '1.3.0'
  id "com.github.ben-manes.versions" version "0.46.0"
}

group 'se.alipsa.groovy'
version '1.0.0-SNAPSHOT'
description = "Groovy library for plotting with matrix ([][] data)"

repositories {
  mavenLocal()
  mavenCentral()
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

// we should consider using monocle to allow this to work for back-end headless apps:
// https://wiki.openjdk.org/display/OpenJFX/Monocle
/*
this makes the javafx dependencies added to the pom
javafx {
  version = "19.0.2.1"
  modules = ['javafx.controls', 'javafx.swing']
}
 */

dependencies {
  OperatingSystem os = OperatingSystem.current()

  def qualifier = 'unknown'
  if (os.isLinux()) {
    qualifier='linux'
  } else if (os.isWindows()) {
    qualifier = 'win'
  } else if (os.isMacOsX()) {
    qualifier = 'mac'
  }
  def javaFxVersion = '19.0.2.1'
  def groovyVersion = '4.0.10'
  def groovy = "org.apache.groovy:groovy:$groovyVersion"
  // compile only dependencies are not included in the pom
  compileOnly groovy
  implementation("se.alipsa.groovy:matrix:1.1.0-SNAPSHOT")
  compileOnly "org.openjfx:javafx-graphics:${javaFxVersion}:$qualifier"
  compileOnly "org.openjfx:javafx-base:${javaFxVersion}:$qualifier"
  compileOnly "org.openjfx:javafx-controls:${javaFxVersion}:$qualifier"
  compileOnly "org.openjfx:javafx-swing:${javaFxVersion}:$qualifier"

  implementation("se.alipsa.groovy:matrix:1.0.2-SNAPSHOT")
  testImplementation groovy
  testImplementation "org.testfx:openjfx-monocle:jdk-11+26"

  testImplementation "org.openjfx:javafx-graphics:${javaFxVersion}:$qualifier"
  testImplementation "org.openjfx:javafx-base:${javaFxVersion}:$qualifier"
  testImplementation "org.openjfx:javafx-controls:${javaFxVersion}:$qualifier"
  testImplementation "org.openjfx:javafx-swing:${javaFxVersion}:$qualifier"
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
  testImplementation "org.apache.groovy:groovy-sql:$groovyVersion"
  testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
}

test {
  testLogging.showStandardStreams = true
  // run using gradle -Pheadless=true test
  jvmArgs "-Dheadless=${project.hasProperty('headless') ? project.headless : false}"
  useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
  classifier = 'javadoc'
  from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

nexusPublishing {
  repositories {
    sonatype()
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Groovy Matrix Plotting'
        description = "${project.description}"
        url = "https://github.com/Alipsa/charts"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/charts/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/charts/tree/master'
          connection = 'scm:git:https://github.com/Alipsa/charts.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/charts.git'
        }
      }
    }
  }
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}